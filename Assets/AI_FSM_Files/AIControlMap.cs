//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/AI_FSM_Files/AIControlMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AIControlMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AIControlMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AIControlMap"",
    ""maps"": [
        {
            ""name"": ""Companion"",
            ""id"": ""cb904248-25b2-429c-b2a7-d5479a292a11"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""6762d4ec-105d-46a9-9933-82672d5f0c18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Follow"",
                    ""type"": ""Button"",
                    ""id"": ""e318e717-4970-4354-8e09-c4b14efeee68"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roam"",
                    ""type"": ""Button"",
                    ""id"": ""46aeeb5e-acc1-435e-a828-3e586bfb64be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""773eabef-f7f1-4680-861d-67fd5f163a76"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d55e4495-db35-4220-8c42-241ccfbc3c3e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Follow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca3128e9-afdd-466b-849b-090d2790169f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Companion
        m_Companion = asset.FindActionMap("Companion", throwIfNotFound: true);
        m_Companion_Attack = m_Companion.FindAction("Attack", throwIfNotFound: true);
        m_Companion_Follow = m_Companion.FindAction("Follow", throwIfNotFound: true);
        m_Companion_Roam = m_Companion.FindAction("Roam", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Companion
    private readonly InputActionMap m_Companion;
    private List<ICompanionActions> m_CompanionActionsCallbackInterfaces = new List<ICompanionActions>();
    private readonly InputAction m_Companion_Attack;
    private readonly InputAction m_Companion_Follow;
    private readonly InputAction m_Companion_Roam;
    public struct CompanionActions
    {
        private @AIControlMap m_Wrapper;
        public CompanionActions(@AIControlMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Companion_Attack;
        public InputAction @Follow => m_Wrapper.m_Companion_Follow;
        public InputAction @Roam => m_Wrapper.m_Companion_Roam;
        public InputActionMap Get() { return m_Wrapper.m_Companion; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CompanionActions set) { return set.Get(); }
        public void AddCallbacks(ICompanionActions instance)
        {
            if (instance == null || m_Wrapper.m_CompanionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CompanionActionsCallbackInterfaces.Add(instance);
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Follow.started += instance.OnFollow;
            @Follow.performed += instance.OnFollow;
            @Follow.canceled += instance.OnFollow;
            @Roam.started += instance.OnRoam;
            @Roam.performed += instance.OnRoam;
            @Roam.canceled += instance.OnRoam;
        }

        private void UnregisterCallbacks(ICompanionActions instance)
        {
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Follow.started -= instance.OnFollow;
            @Follow.performed -= instance.OnFollow;
            @Follow.canceled -= instance.OnFollow;
            @Roam.started -= instance.OnRoam;
            @Roam.performed -= instance.OnRoam;
            @Roam.canceled -= instance.OnRoam;
        }

        public void RemoveCallbacks(ICompanionActions instance)
        {
            if (m_Wrapper.m_CompanionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICompanionActions instance)
        {
            foreach (var item in m_Wrapper.m_CompanionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CompanionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CompanionActions @Companion => new CompanionActions(this);
    public interface ICompanionActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnFollow(InputAction.CallbackContext context);
        void OnRoam(InputAction.CallbackContext context);
    }
}
